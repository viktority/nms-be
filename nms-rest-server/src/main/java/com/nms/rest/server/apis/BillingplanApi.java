/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.23).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.nms.rest.server.apis;

import com.nms.rest.server.models.BillingPlans;
import com.nms.rest.server.models.BillingPlansDto;
import com.nms.rest.server.models.ResponseModel;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-11-30T11:45:01.773Z[GMT]")
public interface BillingplanApi {

    @Operation(summary = "add a new Billing Plan", description = "Adds add a new Billing Plans to the system", tags={ "Billing Plans Management" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Billing Plans created"),
        
        @ApiResponse(responseCode = "400", description = "invalid input, object invalid"),
        
        @ApiResponse(responseCode = "409", description = "An existing Billing Plans already exists") })
    @RequestMapping(value = "/billingplan",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<ResponseModel> addBillingPlan(@Parameter(in = ParameterIn.DEFAULT, description = "Fee to add", schema=@Schema()) @Valid @RequestBody BillingPlansDto body);


    @Operation(summary = "update Billing Plans", description = "Update Billing Plans", tags={ "Billing Plans Management" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Billing Plan updated.", content = @Content(schema = @Schema(implementation = BillingPlans.class))),
        
        @ApiResponse(responseCode = "400", description = "invalid input, object invalid") })
    @RequestMapping(value = "/billingplan/{billingPlanId}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<BillingPlans> billingPlanId(@Parameter(in = ParameterIn.PATH, description = "The billingPlanId used to update the service information", required=true, schema=@Schema()) @PathVariable("billingPlanId") Long billingPlanId, @Parameter(in = ParameterIn.DEFAULT, description = "The Billing Plan to update.", required=true, schema=@Schema()) @Valid @RequestBody BillingPlansDto body);


    @Operation(summary = "Delete a Billing Plan", description = "Delete Billing Plan", tags={ "Billing Plans Management" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Deleted."),
        
        @ApiResponse(responseCode = "400", description = "Unable to delete service.") })
    @RequestMapping(value = "/billingplan/{billingPlanId}",
        method = RequestMethod.DELETE)
    ResponseEntity<ResponseModel> deleteBillingPlanById(@Parameter(in = ParameterIn.PATH, description = "The billingPlanId.", required=true, schema=@Schema()) @PathVariable("billingPlanId") Long billingPlanId);


    @Operation(summary = "get all Billing Plans", description = "", tags={ "Billing Plans Management" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Get all Billing Plans from database", content = @Content(array = @ArraySchema(schema = @Schema(implementation = BillingPlans.class)))),
        
        @ApiResponse(responseCode = "400", description = "bad input parameter") })
    @RequestMapping(value = "/billingplan",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<BillingPlans>> getBillingPlan();


    @Operation(summary = "searches for Billing Plans by name", description = "", tags={ "Billing Plans Management" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "search results matching criteria", content = @Content(schema = @Schema(implementation = BillingPlans.class))),
        
        @ApiResponse(responseCode = "400", description = "bad input parameter") })
    @RequestMapping(value = "/billingplan/{billingPlanName}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<BillingPlans> getBillingPlanByName(@Parameter(in = ParameterIn.PATH, description = "The billingPlanName used to update the service information", required=true, schema=@Schema()) @PathVariable("billingPlanName") String billingPlanName);

}

